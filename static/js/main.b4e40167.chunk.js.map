{"version":3,"sources":["contexts/KanjiContext.js","contexts/ColorContext.js","models/WordBlock.js","models/Question.js","models/ColorToggler.js","models/KanjiToggler.js","App.js","serviceWorker.js","index.js"],"names":["displayKanjiContext","React","createContext","displayColorContext","WordBlock","props","color","useContext","kanji","useState","displayTrad","setDisplayTrad","toDisplay","wb","value","trad","kana","Button","className","style","backgroundColor","onMouseLeave","onMouseEnter","Question","i","this","question","wbs","list","map","Component","ColorToggler","toggleColor","FormControlLabel","control","Switch","size","checked","onChange","event","target","label","labelPlacement","KanjiToggler","toggleKanji","App","questions","valueKanji","Provider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b4e40167.chunk.js","sourcesContent":["\nimport React from 'react'\nexport const displayKanji=    {\n    \"kanji\": false,\n    \"toggleKanji\" :()=>{}\n}\nexport const displayKanjiContext = React.createContext(\ndisplayKanji\n);\n","\nimport React from 'react'\nexport const displayColor=    {\n    \"color\": false,\n    \"toggleColor\" :()=>{}\n}\nexport const displayColorContext = React.createContext(\ndisplayColor\n);\n","import React, { useState } from 'react';\nimport { useContext } from 'react';\nimport {displayKanjiContext} from '../contexts/KanjiContext'\nimport {displayColorContext} from '../contexts/ColorContext'\nimport Button from '@material-ui/core/Button'\n\nexport default function WordBlock(props)\n{\n  \n\n  const {color} = useContext(displayColorContext);\n  const {kanji} = useContext(displayKanjiContext)\n  const [displayTrad,setDisplayTrad] =  useState(false)\n  \n  let toDisplay=props.wb.value;\n\n  if(displayTrad)\n  {\n    if(props.wb.trad)\n    {\n      if(kanji && props.wb.trad.kanji)\n      {\n        toDisplay = props.wb.trad.kanji\n      }else if(props.wb.trad){\n        toDisplay = props.wb.trad.kana\n      }\n    }else{\n      toDisplay=props.wb.value\n    }\n  }else{\n    toDisplay=props.wb.value\n  }\n\n  return(\n    <Button className='wordblock' style={{backgroundColor:color?props.wb.color??'lightgray':'lightgray'}}\n    onMouseLeave={()=>{\n      setDisplayTrad(!displayTrad)\n    }} onMouseEnter={()=>{\n      setDisplayTrad(!displayTrad)\n\n    }}>\n        {toDisplay}\n    </Button>\n\n  )\n}\n","import React from 'react';\nimport WordBlock from './WordBlock.js';\n\nexport default class Question extends React.Component {\n\n    renderWb(i)\n    {\n        return(\n            <WordBlock wb={this.props.question.wbs[i]}>\n            </WordBlock>\n        )\n    }\n\n    render()\n    {\n        const list = this.props.question.wbs.map((wb)=>\n            <WordBlock wb={wb} />\n        )\n\n        return(\n            <div className=\"Question\">\n                {list}\n            </div>\n\n\n        )\n    }\n}\n","import React from 'react'\nimport { displayColorContext } from '../contexts/ColorContext';\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport { Switch } from '@material-ui/core';\n\nfunction ColorToggler() {\n  const {color, toggleColor}= React.useContext(displayColorContext);\n\n  return (\n    <FormControlLabel\n    control={<Switch size=\"small\" checked={color} onChange={(event) =>{toggleColor(event.target.checked)}} />}\n    label={\"color :\"+color} labelPlacement='top'\n  />\n \n  );\n}\n\nexport default ColorToggler;\n","import React from 'react'\nimport { displayKanjiContext } from '../contexts/KanjiContext';\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport { Switch } from '@material-ui/core';\n\nfunction KanjiToggler() {\n  const {kanji, toggleKanji}= React.useContext(displayKanjiContext);\n\n  return (\n    <FormControlLabel\n    control={<Switch size=\"small\" checked={kanji} onChange={(event) =>{toggleKanji(event.target.checked)}} />}\n    label={kanji?'漢字':'かんじ'} labelPlacement='top'\n  /> \n  );\n}\nexport default KanjiToggler;\n\n","import React, { useState } from 'react';\nimport './App.css';\nimport {displayKanjiContext} from './contexts/KanjiContext'\nimport {displayColorContext} from './contexts/ColorContext'\nimport Question from './models/Question'\nimport ColorToggler from './models/ColorToggler';\nimport KanjiToggler from './models/KanjiToggler';\nimport 'fontsource-roboto';\n\nexport default function App(){\n\n    const [questions]=React.useState([\n      {\n        'module': 'no',\n        'id':1,\n        'wbs': [\n          {\n            'value': \"c'est\",\n          },\n          {\n            'value': 'le',\n          },{\n            'value': \"chat\",\n            'color': 'green',\n            'trad': {\n              'kana':'ねこ',\n              'kanji':'猫'\n            },\n          },{\n            'value': \"de\",\n          },{\n            'value': \"link\",\n            'color': 'red',\n            'trad':\n            {\n              'kana':'りンク' \n            },\n          },\n        ]\n      }\n    ])\n\n    const [color, toggleColor] = useState(false);\n    const value = { color, toggleColor };\n\n    const [kanji , toggleKanji] = useState(false);\n    const valueKanji = {kanji, toggleKanji};\n\n    return(\n     <displayKanjiContext.Provider value={valueKanji}>\n      <displayColorContext.Provider value={value}>\n        <div>\n          <ColorToggler> </ColorToggler>\n          <KanjiToggler> </KanjiToggler>\n        </div>\n        <div>\n          <Question question={questions[0]}/>\n        </div>\n      </displayColorContext.Provider>\n    </displayKanjiContext.Provider>         \n    );\n  \n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}