{"version":3,"sources":["contexts/KanjiContext.js","contexts/ColorContext.js","models/WordBlock.js","models/Question.js","models/ResponseBlock.js","models/Response.js","models/ColorToggler.js","models/KanjiToggler.js","App.js","serviceWorker.js","index.js"],"names":["displayKanjiContext","React","createContext","displayColorContext","WordBlock","props","color","useContext","kanji","useState","displayTrad","setDisplayTrad","toDisplay","wb","value","trad","kana","Grid","item","Button","className","style","backgroundColor","onMouseLeave","onMouseEnter","Question","list","this","question","wbs","map","container","justify","spacing","allignItems","Component","ResponseBlock","lValue","setlValue","eqkanji","rb","eqkana","xs","Input","onChange","event","target","Response","response","rbs","key","Math","random","ColorToggler","toggleColor","FormControlLabel","labelPlacement","control","Switch","size","checked","label","concat","KanjiToggler","toggleKanji","App","data","questions","responseData","responses","activeQr","setActiveQr","valueKanji","Provider","jystify","onClick","abs","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cdcfab93.chunk.js","sourcesContent":["\nimport React from 'react'\nexport const displayKanji=    {\n    \"kanji\": false,\n    \"toggleKanji\" :()=>{}\n}\nexport const displayKanjiContext = React.createContext(\ndisplayKanji\n);\n","\nimport React from 'react'\nexport const displayColor=    {\n    \"color\": false,\n    \"toggleColor\" :()=>{}\n}\nexport const displayColorContext = React.createContext(\ndisplayColor\n);\n","import React, { useState } from 'react';\nimport { useContext } from 'react';\nimport { displayKanjiContext } from '../contexts/KanjiContext'\nimport { displayColorContext } from '../contexts/ColorContext'\nimport Button from '@material-ui/core/Button'\nimport {Grid } from '@material-ui/core'\n\nexport default function WordBlock(props) {\n\n\n  const { color } = useContext(displayColorContext);\n  const { kanji } = useContext(displayKanjiContext)\n  const [displayTrad, setDisplayTrad] = useState(false)\n\n  let toDisplay = props.wb.value;\n\n  if (displayTrad) {\n    if (props.wb.trad) {\n      if (kanji && props.wb.trad.kanji) {\n        toDisplay = props.wb.trad.kanji\n      } else if (props.wb.trad) {\n        toDisplay = props.wb.trad.kana\n      }\n    } else {\n      toDisplay = props.wb.value\n    }\n  } else {\n    toDisplay = props.wb.value\n  }\n\n  return (\n   <Grid item>\n    <Button className='wordblock' style={{ backgroundColor: color ? props.wb.color ?? 'lightgray' : 'lightgray' }}\n      onMouseLeave={() => {\n        setDisplayTrad(!displayTrad)\n      }} onMouseEnter={() => {\n        setDisplayTrad(!displayTrad)\n\n      }}>\n      {toDisplay}\n    </Button>\n    </Grid> \n  )\n}\n","import React from 'react';\nimport WordBlock from './WordBlock.js';\nimport {Grid} from '@material-ui/core'\n\nexport default class Question extends React.Component {\n\n\n    render()\n    {\n        const list = this.props.question.wbs.map((wb)=>\n            <WordBlock wb={wb} />\n        )\n\n        return(\n            <Grid container justify=\"center\" spacing=\"2\" allignItems=\"center\">\n                {list}\n            </Grid>\n        )\n    }\n}\n","import React, { useState } from 'react';\nimport {Grid, Input} from '@material-ui/core'\nimport { displayKanjiContext } from '../contexts/KanjiContext'\nimport { useContext } from 'react';\n\nexport default function ResponseBlock(props)\n{\n\n    const { kanji } = useContext(displayKanjiContext)\n    const [lValue, setlValue] = useState(\"\")\n\n    const eqkanji=(lValue===props.rb.kanji)\n    const eqkana=(lValue===props.rb.kana)\n\n    let toDisplay='white';\n    if((kanji && eqkanji) || (!kanji && eqkana) || (eqkana && !(props.rb.kanji) ))\n    {\n        toDisplay='lightgreen'\n    }else if((kanji && eqkana) || (!kanji && eqkanji))\n    {\n        toDisplay='orange'\n    }else{\n        toDisplay='white'\n    }\n\n    return(\n        <Grid item xs=\"1\">\n        <Input style = {{backgroundColor: toDisplay}} onChange={(event)=>{\n            setlValue(event.target.value)\n        }} />\n        </Grid>\n    )\n}\n","import React from 'react';\nimport ResponseBlock from './ResponseBlock.js'\nimport Grid from '@material-ui/core/Grid';\n\nexport default function Response(props)\n{\n    \n    const list = props.response.rbs.map((rb)=>\n    <ResponseBlock key={Math.random()} rb={rb} />\n)\n    return (\n        <Grid container justify=\"center\" spacing=\"2\" allignItems=\"center\">\n            {list}\n        </Grid>\n    )\n}\n","import React from 'react'\nimport { displayColorContext } from '../contexts/ColorContext';\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport { Switch } from '@material-ui/core';\n\nfunction ColorToggler() {\n  const {color, toggleColor}= React.useContext(displayColorContext);\n\n  return (\n    <FormControlLabel labelPlacement=\"start\"\n    control={<Switch size=\"small\" checked={color} onChange={(event) =>{toggleColor(event.target.checked)}} />}\n    label={\"coloration syntaxique :\".concat(color?'on':'off')}\n  />\n \n  );\n}\n\nexport default ColorToggler;\n","import React from 'react'\nimport { displayKanjiContext } from '../contexts/KanjiContext';\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport { Switch } from '@material-ui/core';\n\nfunction KanjiToggler() {\n  const {kanji, toggleKanji}= React.useContext(displayKanjiContext);\n\n  return (\n    <FormControlLabel\n    control={<Switch size=\"small\" checked={kanji} onChange={(event) =>{toggleKanji(event.target.checked)}} />}\n    label={kanji?'漢字':'かんじ'} labelPlacement='start'\n  /> \n  );\n}\nexport default KanjiToggler;\n\n","import React, { useState } from 'react';\nimport './App.css';\nimport { displayKanjiContext } from './contexts/KanjiContext'\nimport { displayColorContext } from './contexts/ColorContext'\nimport Question from './models/Question'\nimport Response from './models/Response'\nimport ColorToggler from './models/ColorToggler';\nimport KanjiToggler from './models/KanjiToggler';\nimport 'fontsource-roboto';\nimport Grid from '@material-ui/core/Grid';\nimport data from './data/theme/no/questions.json';\nimport responseData from './data/theme/no/response.json';\nimport Button from '@material-ui/core/Button'\n\nexport default function App() {\n\n  const [questions] = React.useState(data.questions)\n  const [responses] = React.useState(responseData.responses)\n  let [activeQr,setActiveQr] = React.useState(0);\n\n  const [color, toggleColor] = useState(false);\n  const value = { color, toggleColor };\n\n  const [kanji, toggleKanji] = useState(false);\n  const valueKanji = { kanji, toggleKanji };\n\n\n  return (\n    <div>\n      <displayKanjiContext.Provider value={valueKanji}>\n        <displayColorContext.Provider value={value}>\n          <Grid container jystify=\"center\">\n\n          </Grid>\n          <Grid container justify=\"center\">\n            <Grid item>\n              <ColorToggler> </ColorToggler>\n            </Grid>\n            <Grid item>\n              <KanjiToggler> </KanjiToggler>\n            </Grid>\n          </Grid>\n          <Question question={questions[activeQr]} />\n          <Response response={responses[activeQr]}></Response>\n          <Grid container justify=\"center\">\n            <Grid item>\n            <Button onClick={()=>{\n              setActiveQr(Math.abs(--activeQr%questions.length))\n            }}>\n              \n              précedent\n            </Button>\n            </Grid>\n            <Grid item>\n            <Button onClick={()=>{\n              setActiveQr((++activeQr%questions.length))\n            }}>\n              suivant\n            </Button>\n            </Grid>\n          </Grid>\n        </displayColorContext.Provider>\n      </displayKanjiContext.Provider>\n    </div>\n  );\n\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}