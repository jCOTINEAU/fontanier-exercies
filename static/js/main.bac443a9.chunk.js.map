{"version":3,"sources":["contexts/KanjiContext.js","contexts/ColorContext.js","contexts/ModuleContext.js","contexts/VersionContext.js","models/WordBlock.js","models/Question.js","models/ResponseBlock.js","models/Response.js","models/ColorToggler.js","models/KanjiToggler.js","models/VersionToggler.js","models/ModuleMenu.js","models/TopBar.js","App.js","serviceWorker.js","index.js"],"names":["displayKanjiContext","React","createContext","displayColorContext","displayModuleContext","displayVersionContext","WordBlock","props","color","useContext","kanji","useState","onHover","setonHover","toDisplay","wb","origin","onHoverAlternate","alternate","Grid","item","Button","className","style","backgroundColor","onMouseLeave","onMouseEnter","onClick","navigator","clipboard","writeText","Question","versionValue","this","version","qKey","module","question","id","list","wbs","map","index","key","container","justify","spacing","allignItems","Component","ResponseBlock","lValue","setlValue","eqkanji","rb","eqkana","xs","md","Input","onChange","event","target","value","Response","response","rbs","ColorToggler","toggleColor","FormControlLabel","labelPlacement","control","Switch","size","checked","label","concat","KanjiToggler","toggleKanji","VersionToggler","toggleVersion","options","ModuleMenu","toggleModule","anchorEl","setAnchorEl","open","Boolean","handleClose","data","IconButton","aria-label","aria-controls","aria-haspopup","currentTarget","Menu","keepMounted","onClose","PaperProps","maxHeight","ITEM_HEIGHT","width","option","MenuItem","selected","e","TopBar","App","error","setError","isLoaded","setIsLoaded","questions","setQuestions","responses","setResponses","activeQr","setActiveQr","valueKanji","valueVersion","valueModule","useEffect","fetch","then","res","json","result","message","Provider","Math","abs","length","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.bac443a9.chunk.js","sourcesContent":["\nimport React from 'react'\nexport const displayKanji=    {\n    \"kanji\": false,\n    \"toggleKanji\" :()=>{}\n}\nexport const displayKanjiContext = React.createContext(\ndisplayKanji\n);\n","\nimport React from 'react'\nexport const displayColor=    {\n    \"color\": false,\n    \"toggleColor\" :()=>{}\n}\nexport const displayColorContext = React.createContext(\ndisplayColor\n);\n","\nimport React from 'react'\nexport const displayModule=    {\n    \"Module\": false,\n    \"toggleModule\" :()=>{}\n}\nexport const displayModuleContext = React.createContext(\ndisplayModule\n);\n","\nimport React from 'react'\nexport const displayVersion=    {\n    \"version\": false,\n    \"toggleVersion\" :()=>{}\n}\nexport const displayVersionContext = React.createContext(\ndisplayVersion\n);\n","import React, { useState } from 'react';\nimport { useContext } from 'react';\nimport { displayKanjiContext } from '../contexts/KanjiContext'\nimport { displayColorContext } from '../contexts/ColorContext'\nimport Button from '@material-ui/core/Button'\nimport {Grid } from '@material-ui/core'\n\nexport default function WordBlock(props) {\n\n\n  const { color } = useContext(displayColorContext);\n  const { kanji } = useContext(displayKanjiContext)\n  const [onHover, setonHover] = useState(false)\n\n  let toDisplay = props.wb.origin;\n\n  if(kanji)\n  {\n    if(onHover)\n    {\n      toDisplay=props.wb.onHoverAlternate??props.wb.onHover??props.wb.origin\n    }else{\n      toDisplay=props.wb.alternate??props.wb.origin\n    }\n  }else{\n    if(onHover){\n      toDisplay=props.wb.onHover??props.wb.origin\n    }\n  }\n\n  return (\n   <Grid item>\n    <Button className='wordblock' style={{ backgroundColor: color ? props.wb.color ?? 'lightgray' : 'lightgray' }}\n      onMouseLeave={() => {\n        setonHover(!onHover)\n      }} onMouseEnter={() => {\n        setonHover(!onHover)\n      }}\n      onClick={()=>{\n        navigator.clipboard.writeText(toDisplay)\n      }}>\n      {toDisplay}\n    </Button>\n    </Grid> \n  )\n}\n","import React from 'react';\nimport WordBlock from './WordBlock.js';\nimport {Grid} from '@material-ui/core'\n\nexport default class Question extends React.Component {\n\n\n    render()\n    {\n        const versionValue=this.props.version?\"version\":\"theme\"\n        const qKey=this.props.module+versionValue+this.props.question.id*100;\n\n        const list = this.props.question.wbs.map((wb,index)=>\n            <WordBlock key={qKey+index} wb={wb} />\n        )\n\n        return(\n            <Grid container justify=\"center\" spacing=\"2\" allignItems=\"center\">\n                <Grid container justify=\"center\">\n                    <Grid item>\n                        <div>question n°:{this.props.question.id}</div>\n                    </Grid>\n                </Grid>\n                {list}\n            </Grid>\n        )\n    }\n}\n","import React, { useState } from 'react';\nimport {Grid, Input} from '@material-ui/core'\nimport { displayKanjiContext } from '../contexts/KanjiContext'\nimport { useContext } from 'react';\n\nexport default function ResponseBlock(props)\n{\n\n    const { kanji } = useContext(displayKanjiContext)\n    const [lValue, setlValue] = useState(\"\")\n\n    const eqkanji=(lValue===props.rb.alternate)\n    const eqkana=(lValue===props.rb.origin)\n\n    let toDisplay='white';\n    if((kanji && eqkanji) || (!kanji && eqkana) || (eqkana && !(props.rb.alternate) ))\n    {\n        toDisplay='lightgreen'\n    }else if((kanji && eqkana) || (!kanji && eqkanji))\n    {\n        toDisplay='orange'\n    }else{\n        toDisplay='white'\n    }\n\n    return(\n        <Grid item xs=\"3\" md=\"1\">\n        <Input style = {{backgroundColor: toDisplay}} onChange={(event)=>{\n            setlValue(event.target.value)\n        }} />\n        </Grid>\n    )\n}\n","import React from 'react';\nimport ResponseBlock from './ResponseBlock.js'\nimport Grid from '@material-ui/core/Grid';\n\nexport default function Response(props)\n{\n    const versionValue=props.version?\"version\":\"theme\"\n    const qKey=props.module+versionValue+props.response.id*100;\n\n    const list = props.response.rbs.map((rb,index)=>\n    <ResponseBlock key={qKey+index} rb={rb} />\n)\n    return (\n        <Grid container justify=\"center\" spacing=\"2\" allignItems=\"center\">\n            {list}\n        </Grid>\n    )\n}","import React from 'react'\nimport { displayColorContext } from '../contexts/ColorContext';\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport { Switch } from '@material-ui/core';\n\nfunction ColorToggler() {\n  const {color, toggleColor}= React.useContext(displayColorContext);\n\n  return (\n    <FormControlLabel labelPlacement=\"start\"\n    control={<Switch size=\"small\" checked={color} onChange={(event) =>{toggleColor(event.target.checked)}} />}\n    label={\"coloration :\".concat(color?'on':'off')}\n  />\n \n  );\n}\n\nexport default ColorToggler;\n","import React from 'react'\nimport { displayKanjiContext } from '../contexts/KanjiContext';\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport { Switch } from '@material-ui/core';\n\nfunction KanjiToggler() {\n  const {kanji, toggleKanji}= React.useContext(displayKanjiContext);\n\n  return (\n    <FormControlLabel\n    control={<Switch size=\"small\" checked={kanji} onChange={(event) =>{toggleKanji(event.target.checked)}} />}\n    label={kanji?'漢字':'かんじ'} labelPlacement='start'\n  /> \n  );\n}\nexport default KanjiToggler;\n\n","import React from 'react'\nimport { displayVersionContext } from '../contexts/VersionContext';\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport { Switch } from '@material-ui/core';\n\nfunction VersionToggler() {\n  const {version, toggleVersion}= React.useContext(displayVersionContext);\n\n  return (\n    <FormControlLabel labelPlacement=\"start\"\n    control={<Switch size=\"small\" checked={version} onChange={(event) =>{toggleVersion(event.target.checked)}} />}\n    label={version?\"version\":\"theme\"}\n  />\n \n  );\n}\n\nexport default VersionToggler;\n","import React from 'react';\nimport IconButton from '@material-ui/core/IconButton';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\n\nimport { displayModuleContext } from '../contexts/ModuleContext';\n\nconst options = [\n  'no',\n  'de'\n];\n\nconst ITEM_HEIGHT = 48;\n\nexport default function ModuleMenu()\n{\n\n  const {module, toggleModule}= React.useContext(displayModuleContext);\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = (event,data) => {\n    setAnchorEl(null);\n    if(data !== \"backdropClick\")\n    {\n      toggleModule(data)\n    }\n\n  };\n\n  return (\n    <div>\n      <IconButton\n        aria-label=\"more\"\n        aria-controls=\"long-menu\"\n        aria-haspopup=\"true\"\n        onClick={handleClick}\n      >\n        <MoreVertIcon />\n      </IconButton>\n      <Menu\n        id=\"long-menu\"\n        anchorEl={anchorEl}\n        keepMounted\n        open={open}\n        onClose={handleClose}\n        PaperProps={{\n          style: {\n            maxHeight: ITEM_HEIGHT * 4.5,\n            width: '20ch',\n          },\n        }}\n      >\n        {options.map((option) => (\n          <MenuItem key={option} selected={option === module} onClick={((e) => handleClose(e,option))}>\n            {option}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n}\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport ColorToggler from './ColorToggler';\nimport KanjiToggler from './KanjiToggler';\nimport VersionToggler from './VersionToggler';\nimport ModuleMenu from './ModuleMenu';\nexport default function TopBar() {\n\n\n  return (\n    <Grid container justify=\"center\">\n      <Grid item>\n        <ModuleMenu> </ModuleMenu>\n      </Grid>\n      <Grid item>\n        <VersionToggler> </VersionToggler>\n      </Grid>\n      <Grid item>\n        <ColorToggler> </ColorToggler>\n      </Grid>\n      <Grid item>\n        <KanjiToggler> </KanjiToggler>\n      </Grid>\n    </Grid>\n  )\n\n}\n","import React, { useState } from 'react';\nimport './App.css';\nimport { useEffect } from 'react';\nimport { displayKanjiContext } from './contexts/KanjiContext'\nimport { displayColorContext } from './contexts/ColorContext'\nimport { displayModuleContext} from './contexts/ModuleContext'\nimport { displayVersionContext } from './contexts/VersionContext';\n\nimport Question from './models/Question'\nimport Response from './models/Response'\n\nimport 'fontsource-roboto';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button'\nimport TopBar from './models/TopBar';\n\nexport default function App() {\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n\n  const [questions, setQuestions] = React.useState([])\n  const [responses, setResponses] = React.useState([])\n  let [activeQr, setActiveQr] = React.useState(0);\n\n  const [color, toggleColor] = useState(false);\n  const value = { color, toggleColor };\n\n  const [kanji, toggleKanji] = useState(false);\n  const valueKanji = { kanji, toggleKanji };\n\n  const [version, toggleVersion] = useState(true);\n  const valueVersion = { version, toggleVersion };\n\n  const [module, toggleModule] = useState(\"no\");\n  const valueModule = { module, toggleModule };\n\n  useEffect(() => {\n      const modChoice = version?\"version\":\"theme\";\n      fetch(\"https://raw.githubusercontent.com/jCOTINEAU/fontanier-exercies/data/data/\"+modChoice+\"/\"+module+\"/data.json\")\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          setQuestions(result.questions);\n          setResponses(result.responses);\n          setIsLoaded(true);\n        },\n        (error) => {\n          setError(error.message);\n          setIsLoaded(true);\n          \n        }\n      )\n  \n  }, [isLoaded,error,module,version])\n\n  if (error) {\n    return <div>Erreur : {error}</div>;\n  } else if (!isLoaded) {\n    return <div>Chargement...</div>;\n  } else {\n    return (\n      <div>\n        <displayKanjiContext.Provider value={valueKanji}>\n          <displayColorContext.Provider value={value}>\n            <displayVersionContext.Provider value={valueVersion}> \n              <displayModuleContext.Provider value={valueModule}>\n\n\n              <TopBar></TopBar>\n\n\n              <Question version={version} module={module} question={questions[activeQr]} />\n              <Response version={version} module={module} response={responses[activeQr]}></Response>\n\n\n\n              <Grid container justify=\"center\">\n                <Grid item>\n                  <Button color=\"secondary\" onClick={() => {\n                    setActiveQr(Math.abs(--activeQr % questions.length))\n                  }}>\n                    précédent\n              </Button>\n                </Grid>\n                <Grid item>\n                  <Button color=\"primary\" onClick={() => {\n                    setActiveQr((++activeQr % questions.length))\n                  }}>\n                    suivant\n              </Button>\n                </Grid>\n              </Grid>\n\n\n\n\n             </displayModuleContext.Provider>\n            </displayVersionContext.Provider>\n          </displayColorContext.Provider>\n        </displayKanjiContext.Provider>\n      </div>\n    );\n  }\n\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}